class ClassServo extends ClassMiddleActuator{constructor(_actuatorProps,_opts){ClassMiddleActuator.call(this,_actuatorProps,_opts);const changeNotation=str=>`_${str[0].toUpperCase()}${str.substr(1)}`;if("number"!=typeof _actuatorProps.maxRange||"number"!=typeof _actuatorProps.maxPulse||"number"!=typeof _actuatorProps.minPulse)throw new Error("Some arg are missing");if(_actuatorProps.minRange&&"number"!=typeof _actuatorProps.minRange||_actuatorProps.minRange>=_actuatorProps.maxRange||_actuatorProps.minPulse>=_actuatorProps.maxPulse||_actuatorProps.defaultPos&&"number"!=typeof _actuatorProps.defaultPos||_actuatorProps.defaultPos<_actuatorProps.minRange||_actuatorProps.defaultPos>_actuatorProps.maxRange)throw new Error("Invalid arg");this._MinRange=_actuatorProps.minRange||0,this._MaxRange=_actuatorProps.maxRange,this._MaxPulse=_actuatorProps.maxPulse,this._MinPulse=_actuatorProps.minPulse,this._DefaultPos=_actuatorProps.defaultPos||this._MinRange,this._LastInput=void 0,this.Reset()}get Position(){return this._LastInput}On(_chNum,_deg){if("number"!=typeof _deg)throw new Error("Invalid arg");let deg=E.clip(_deg,this._MinRange,this._MaxRange);if(_deg!==deg)throw new Error("Invalid degree value");const proportion=(x,in_low,in_high,out_low,out_high)=>(x-in_low)*(out_high-out_low)/(in_high-in_low)+out_low,freq=20,msec=proportion(deg,this._MinRange,this._MaxRange,this._MinPulse,this._MaxPulse),val=proportion(msec,0,20,0,1);this._IsChOn[0]=!0,analogWrite(this._Pins[0],val,{freq:20,soft:!1}),this._LastInput=deg}Off(){digitalWrite(this._Pins[0],1),this._IsChOn[0]=!1}Reset(){this.On(this._DefaultPos),setTimeout(()=>{digitalWrite(this._Pins[0],1),this._IsChOn[0]=!1},1e3)}}